# -*- coding: utf-8 -*-
"""PA 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RjLBRcf334TiDVZUzxi0q5IAQUxss0uX



#PYTHON ASSIGNMENT
"""

1. Why are functions advantageous to have in your programs?
ANS:
  Functions are advantageous to have in your Python programs for several reasons:

1. Reusability: Functions allow you to write a block of code that can be used repeatedly throughout your program. By encapsulating a set of instructions within a function, you can easily reuse that code whenever you need it, without
having to rewrite it multiple times. This saves you from redundancy and makes your code more concise and modular.

2. Modularity: Functions promote modular programming by breaking down complex tasks into smaller, manageable parts. Each function performs a
specific task or operation, which makes the code easier to understand, maintain, and debug. It also allows multiple developers to work on
different functions simultaneously, promoting code organization and collaboration.

3. Abstraction: Functions provide a level of abstraction by hiding the implementation details of a particular task. When you use a function,
you don't need to know how it works internally; you only need to know what inputs it requires and what output it produces. This abstraction
simplifies the overall program structure and makes it easier to work with complex systems.

4. Code readability: Functions enhance code readability by giving meaningful names to blocks of code. Well-named functions can serve as
self-documenting units, providing a clear indication of what a particular block of code does. This improves the readability and understanding of
 the program, especially when the codebase becomes larger and more complex.

5. Code organization: Functions allow you to organize your code logically. By grouping related tasks into separate functions, you can establish
 a clear structure and hierarchy within your program. This helps you locate specific functionality quickly and promotes code maintainability and
 reusability.

6. Testing and debugging: Functions enable easier testing and debugging of your code. Since functions perform specific tasks, you can focus on
testing and fixing issues within a particular function, rather than dealing with the entire program. This granularity simplifies the testing
process and makes it easier to identify and isolate bugs.







2. When does the code in a function run: when it&#39;s specified or when it&#39;s called?

ANS:

  In Python, the code inside a function runs when the function is called, not when it is defined or specified.

When you define a function in Python, you are essentially creating a reusable block of code that can be executed at a later time.
The code inside the function is not executed immediately upon definition; it only runs when the function is called.

Here's an example to illustrate this:


```python
def my_function():
    print("Inside the function")

print("Before function call")
my_function()
print("After function call")
```

When you run this code, the output will be:

```
Before function call
Inside the function
After function call
```

As you can see, the code inside the function is executed only when `my_function()` is called. Before and after the function call,
the statements outside the function are executed sequentially.







3. What statement creates a function?
ANS:

  In Python, the `def` statement is used to create a function.

The general syntax for creating a function is as follows:

```python
def function_name(arguments):
    # Function body
    # Code to be executed when the function is called
    # ...
```

Let's look at an example:

```python
def greet(name):
    print("Hello, " + name + "!")

greet("Alice")
greet("Bob")
```

In this example, the `def` statement is used to create a function called `greet`. It takes one argument, `name`. When the function is called
with a specific name, it prints a greeting message. The function is then called twice with different names.

The output of this code will be:

```
Hello, Alice!
Hello, Bob!
```

So, the `def` statement is used to define and create a function in Python. Once the function is defined, you can call it by using its name
followed by parentheses and passing any required arguments.







4. What is the difference between a function and a function call?
ANS:
  A function and a function call are related but distinct concepts in programming.

1. Function: A function is a block of code that performs a specific task. It is defined using the `def` statement in Python and consists of a
function name, optional parameters (arguments), and a block of code that gets executed when the function is called. Functions allow you to
organize and reuse code, making programs more modular and easier to understand.

Example of a function definition:
```python
def add_numbers(a, b):
    return a + b
```

In this example, `add_numbers` is a function that takes two arguments (`a` and `b`) and returns their sum.

2. Function Call: A function call is the act of invoking or executing a function. It is done by using the function name followed by parentheses,
 optionally passing arguments inside the parentheses if the function expects them. When a function call is made, the program transfers control
  to the function, executes the code within the function, and returns the result (if any) back to the caller.

Example of a function call:
```python
result = add_numbers(5, 3)
```

In this example, `add_numbers(5, 3)` is a function call that passes the arguments `5` and `3` to the `add_numbers` function. The return value of
the function (the sum of the two numbers) is stored in the `result` variable.

 a function is a defined block of code that performs a specific task, while a function call is the act of invoking that function with
 specific arguments to execute its code and potentially obtain a return value.
 
 
 
 
 
 
 

5. How many global scopes are there in a Python program? How many local scopes?
ANS:
  In a Python program, there is one global scope and multiple local scopes.

1. Global Scope: The global scope refers to the outermost level of a Python program or module. Any variables, functions, or classes defined at
this level are considered to be in the global scope. The global scope is accessible from anywhere within the program. Variables defined in the
 global scope are global variables and can be accessed and modified throughout the program.

Example:
```python
global_variable = 10

def my_function():
    print(global_variable)

print(global_variable)  # Output: 10
my_function()  # Output: 10
```

In this example, `global_variable` is defined in the global scope. It can be accessed both outside the function and inside the `my_function`
function.

2. Local Scopes: Local scopes are created whenever a function or a block is defined. Each function or block has its own local scope, which is
separate from the global scope. Variables defined within a local scope are called local variables and are only accessible within that particular
 scope.

Example:
```python
def my_function():
    local_variable = 5
    print(local_variable)

my_function()  # Output: 5
print(local_variable)  # NameError: name 'local_variable' is not defined
```

In this example, `local_variable` is defined within the local scope of the `my_function` function. It can only be accessed within the function
and not outside of it.

In summary, a Python program has one global scope that is accessible throughout the program, and multiple local scopes that are created whenever
a function or a block is defined. Variables defined in the global scope are global variables, while variables defined within a local scope are
local variables.In a Python program, there is one global scope and multiple local scopes.

1. Global Scope: The global scope refers to the outermost level of a Python program or module. Any variables, functions, or classes defined at
 this level are considered to be in the global scope. The global scope is accessible from anywhere within the program. Variables defined in the
 global scope are global variables and can be accessed and modified throughout the program.

Example:
```python
global_variable = 10

def my_function():
    print(global_variable)

print(global_variable)  # Output: 10
my_function()  # Output: 10
```

In this example, `global_variable` is defined in the global scope. It can be accessed both outside the function and inside the `my_function`
 function.

2. Local Scopes: Local scopes are created whenever a function or a block is defined. Each function or block has its own local scope, which is
separate from the global scope. Variables defined within a local scope are called local variables and are only accessible within that particular
 scope.

Example:
```python
def my_function():
    local_variable = 5
    print(local_variable)

my_function()  # Output: 5
print(local_variable)  # NameError: name 'local_variable' is not defined
```

In this example, `local_variable` is defined within the local scope of the `my_function` function. It can only be accessed within the function
and not outside of it.

In summary, a Python program has one global scope that is accessible throughout the program, and multiple local scopes that are created whenever
a function or a block is defined. Variables defined in the global scope are global variables, while variables defined within a local scope are
local variables.









6. What happens to variables in a local scope when the function call returns?
ANS:
  When a function call returns in Python, the local variables defined within the function scope cease to exist. They are destroyed, and their
values are no longer accessible or retained.

Consider the following example:

```python
def my_function():
    x = 5
    print("Inside the function:", x)

my_function()
print("Outside the function:", x)
```

In this example, the variable `x` is defined within the local scope of the `my_function` function. When the function is called, the value of
`x` is printed inside the function. However, if you try to access the value of `x` outside the function, you will encounter a `NameError`
because `x` does not exist in the global scope:

```
Inside the function: 5
NameError: name 'x' is not defined
```

The local variables within a function's scope have a limited lifetime that extends only for the duration of the function call. Once the function
returns, the local variables are destroyed, and their values are no longer accessible. This behavior ensures that local variables do not
interfere with other parts of the program, and each function call operates independently with its own set of variables.








7. What is the concept of a return value? Is it possible to have a return value in an expression?
ANS:
  The concept of a return value in programming refers to the value that a function can send back to the caller after executing its code. When a
function is called, it may perform some calculations or operations and then provide a result or output using the `return` statement.

The `return` statement allows a function to exit and return a value to the caller. It can be used to pass data or results from the function back
 to the code that called it. The return value can be of any data type, such as numbers, strings, lists, or even more complex objects.

Here's an example of a function that calculates the square of a number and returns the result:

```python
def square(x):
    return x * x

result = square(5)
print(result)  # Output: 25
```

In this example, the `square` function takes a parameter `x` and returns the square of that number using the `return` statement. The return
value, `x * x`, is assigned to the `result` variable when the function is called. The value `25` is then printed.

Regarding the second part of your question, yes, it is possible to have a return value in an expression. In Python, the result of a function call
 that includes a return statement can be used within an expression, assigned to a variable, passed as an argument to another function, or used
 in any other valid expression.

For example:

```python
def add(a, b):
    return a + b

result = add(3, 4) * 2
print(result)  # Output: 14
```

In this example, the return value of the `add` function, which is the sum of `a` and `b`, is multiplied by `2` within the expression `add(3, 4) * 2`.
The resulting value, `14`, is assigned to the `result` variable and printed.

So, return values provide a way for functions to communicate and pass data back to the calling code, and they can be used as part of
 expressions to perform further calculations or operations.
 
 
 
 
 
 

8. If a function does not have a return statement, what is the return value of a call to that function?
ANS:
  If a function does not have a return statement, the return value of a call to that function is `None`. In Python, `None` is a special
  object that represents the absence of a value. When a function reaches the end without encountering a return statement, it implicitly
 returns `None`. This means that if you assign the result of a function call that doesn't have a return statement to a variable or use it in
 an expression, the value of that variable or expression will be `None`.
 
 
 
 
 

9. How do you make a function variable refer to the global variable?
ANS:
  In Python, if you want to make a function variable refer to the global variable, you can use the `global` keyword within the function.
  Here's an example:

```python
global_var = 10

def update_global():
    global global_var
    global_var = 20

print(global_var)  # Output: 10
update_global()
print(global_var)  # Output: 20
```

In the above code, we have a global variable `global_var` initially set to 10. Inside the `update_global()` function, we use the `global`
keyword before the variable name `global_var`. This informs Python that we want to modify the global variable instead of creating a new local
variable with the same name.

When we call `update_global()`, the value of `global_var` is changed to 20. After the function call, if we print the value of `global_var`, it
reflects the updated value.

Note that using the `global` keyword is necessary only when you want to modify the value of the global variable within a function. If you only
need to access the global variable without modifying it, you can directly refer to it within the function's code without using the `global`
keyword.









10. What is the data type of None?
ANS:
  In Python, `None` is a special constant object that represents the absence of a value or the lack of a value. It is considered a singleton object
  \of the `NoneType` data type.

The `NoneType` is a built-in type in Python and has only one value, which is `None`. It is used to indicate that a variable or expression does
not have a value or that a function does not return anything explicitly.

You can check the data type of `None` using the `type()` function, like this:

```python
print(type(None))  # Output: <class 'NoneType'>
```

The output shows that the data type of `None` is `<class 'NoneType'>`.











11. What does the sentence import areallyourpetsnamederic do?
ANS:
  The sentence "import areallyourpetsnamederic" does not have any intrinsic meaning in Python. It is not a valid Python import statement and
  will result in a syntax error.

In Python, the `import` statement is used to import modules or packages into a Python script. The module or package being imported should have

 a valid name that adheres to the Python naming conventions.

For example, a valid import statement would look like this:

```python
import math
```

In this case, the `math` module is being imported, which provides various mathematical functions and constants.

The sentence "import areallyourpetsnamederic" does not correspond to any existing module or package name and would not serve any functional
purpose in a Python program. It would result in a `ModuleNotFoundError` or a `SyntaxError` due to the invalid syntax.











12. If you had a bacon() feature in a spam module, what would you call it after importing spam?
ANS:
  If you have imported the `spam` module in your Python script, and the `spam` module contains a feature or function named `bacon()`, you can
  call it using the module name as a prefix followed by the function name.

Here's an example:

```python
import spam

spam.bacon()
```

In the above code, we import the `spam` module using the `import` statement. Then, to call the `bacon()` function from the `spam` module, we use
the syntax `spam.bacon()`.

By prefixing the module name (`spam`) followed by a dot (`.`), you can access the features, functions, or variables defined within that module.
 This way, you can specifically call the `bacon()` function from the `spam` module without any naming conflicts if there are multiple modules
 with a similar feature.
 
 
 
 
 
 
 
 
 
 

13. What can you do to save a programme from crashing if it encounters an error?
ANS:
  To prevent a program from crashing when it encounters an error, you can use exception handling. Exception handling allows you to catch and
  handle exceptions that occur during program execution, allowing the program to gracefully recover from errors and continue running.

In Python, you can use the `try-except` statement for exception handling. Here's the basic syntax:

```python
try:
    # Code that may raise an exception
    # ...
except ExceptionType:
    # Code to handle the exception
    # ...
```

Here's an example that demonstrates how to use exception handling to prevent a program from crashing:

```python
try:
    # Code that may raise an exception
    result = 10 / 0  # Division by zero error
    print(result)
except ZeroDivisionError:
    # Code to handle the exception
    print("Error: Division by zero occurred")
```

In this example, the code within the `try` block attempts to perform a division by zero operation, which raises a `ZeroDivisionError` exception.
Instead of crashing the program, the exception is caught by the `except` block, and the code within the `except` block is executed. In this
case, the program prints an error message indicating the division by zero occurred.

By using exception handling, you can catch specific exceptions, handle them appropriately, and continue program execution rather than allowing
the program to crash. This helps in creating more robust and fault-tolerant programs.










14. What is the purpose of the try clause? What is the purpose of the except clause?
ANS:
  The `try` clause is used in Python for exception handling. Its purpose is to enclose a block of code where an exception might occur. The code
  within the `try` block is executed, and if an exception is raised during its execution, the program flow is transferred to the corresponding
  `except` clause.

The primary purpose of the `try` clause is to provide a mechanism to catch and handle exceptions in a controlled manner. It allows you to
anticipate and handle specific exceptions that may occur within the `try` block.

The `except` clause, which follows the `try` block, specifies the type of exception(s) to catch and provides the code that should be executed
when that particular exception occurs. If an exception matches the specified type(s), the corresponding `except` block is executed. You can have
 multiple `except` clauses to handle different types of exceptions.

The purpose of the `except` clause is to define the handling logic for exceptions. It allows you to gracefully handle exceptions, perform error
recovery, log error messages, display user-friendly error messages, or take any other appropriate action to deal with the exceptional condition.

Here's an example that illustrates the usage and purpose of the `try` and `except` clauses:

```python
try:
    # Code that may raise an exception
    result = 10 / 0  # Division by zero error
    print(result)
except ZeroDivisionError:
    # Code to handle the specific exception (ZeroDivisionError)
    print("Error: Division by zero occurred")
```

In this example, the `try` block contains code that may raise a `ZeroDivisionError` exception. The `except` block is responsible for handling
that specific exception type and printing an error message indicating the division by zero occurred.
